/*
 * generated by Xtext 2.12.0
 */
package bergmann.masterarbeit.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import bergmann.masterarbeit.monitorDsl.MonitorDslPackage
import org.eclipse.xtext.EcoreUtil2
import bergmann.masterarbeit.monitorDsl.CrossReference
import java.util.ArrayList
import static extension bergmann.masterarbeit.utils.ExpressionUtils.*
import bergmann.masterarbeit.monitorDsl.Monitors
import org.eclipse.xtext.scoping.Scopes
import bergmann.masterarbeit.monitorDsl.MappingBinary
import bergmann.masterarbeit.monitorDsl.MappingUnary
import bergmann.masterarbeit.mappingdsl.mappingDSL.Domain
import org.eclipse.emf.ecore.util.EcoreUtil
import bergmann.masterarbeit.mappingdsl.mappingDSL.LiteralJava
import bergmann.masterarbeit.mappingdsl.mappingDSL.DomainValue
import bergmann.masterarbeit.mappingdsl.mappingDSL.BinaryJava
import bergmann.masterarbeit.mappingdsl.mappingDSL.UnaryJava

/**
 * This class contains custom scoping description.
 * 
 * See 
 * on how and when to use it.
 */
class MonitorDslScopeProvider extends AbstractMonitorDslScopeProvider {

	override getScope(EObject ctx, EReference ref){
		if(ctx instanceof CrossReference && ref == MonitorDslPackage.Literals.CROSS_REFERENCE__REF){
			// CrossReference
			// Refers to UserVariables or to domain java literals / database values
			var Monitors root = EcoreUtil2.getRootContainer(ctx) as Monitors
			var candidates = new ArrayList<EObject>()
			candidates.addAll(root.allUserVariables)
			// Make self reference impossible 
			// Example def var x := x + 2
			var EObject parentOfCTX = null
			for(EObject current : candidates)
				if(EcoreUtil.isAncestor(current, ctx))
					parentOfCTX = current
			if(parentOfCTX != null)
				candidates.remove(parentOfCTX)
			// Add imported domain elements
			for(Domain current : root.importedDomains){
				candidates.addAll(EcoreUtil2.eAllOfType(current, LiteralJava))
				candidates.addAll(EcoreUtil2.eAllOfType(current, DomainValue))
			}
			return Scopes.scopeFor(candidates)
		} else if (ctx instanceof MappingBinary && ref == MonitorDslPackage.Literals.MAPPING_BINARY__REF){
			// MappingBinary
			// Refers to domain BinaryJava elements
			var Monitors root = EcoreUtil2.getRootContainer(ctx) as Monitors
			var candidates = new ArrayList<EObject>()
			for(Domain current : root.importedDomains){
				candidates.addAll(EcoreUtil2.eAllOfType(current, BinaryJava))
			}
			return Scopes.scopeFor(candidates)
		} else if (ctx instanceof MappingUnary && ref == MonitorDslPackage.Literals.MAPPING_UNARY__REF){
			// MappingUnary
			// Refers to domain UnaryJava elements
			var Monitors root = EcoreUtil2.getRootContainer(ctx) as Monitors
			var candidates = new ArrayList<EObject>()
			for(Domain current : root.importedDomains){
				candidates.addAll(EcoreUtil2.eAllOfType(current, UnaryJava))
			}
			return Scopes.scopeFor(candidates)
		}
		return super.getScope(ctx, ref)
	}
	

}
