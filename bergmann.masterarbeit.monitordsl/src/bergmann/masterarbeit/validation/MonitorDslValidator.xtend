/*
 * generated by Xtext 2.12.0
 */
package bergmann.masterarbeit.validation

import bergmann.masterarbeit.monitorDsl.Assertion
import bergmann.masterarbeit.monitorDsl.MonitorDslPackage
import bergmann.masterarbeit.monitorDsl.UserVariable
import org.eclipse.xtext.validation.Check
import bergmann.masterarbeit.monitorDsl.Expression
import bergmann.masterarbeit.monitorDsl.*
import bergmann.masterarbeit.utils.ExpressionTypeChecker
import static extension bergmann.masterarbeit.utils.ExpressionUtils.*
import static extension bergmann.masterarbeit.utils.ExpressionTypeChecker.*
import static extension bergmann.masterarbeit.utils.UnitUtils.*
import bergmann.masterarbeit.utils.ExpressionUtils
import bergmann.masterarbeit.monitorDsl.impl.AddImpl
import org.eclipse.xtext.EcoreUtil2
import bergmann.masterarbeit.mappingdsl.mappingDSL.Domain
import java.util.ArrayList
import java.util.HashMap
import org.eclipse.emf.ecore.util.EcoreUtil
import bergmann.masterarbeit.mappingdsl.mappingDSL.LiteralJava
import bergmann.masterarbeit.mappingdsl.mappingDSL.UnaryJava
import bergmann.masterarbeit.mappingdsl.mappingDSL.BinaryJava
import bergmann.masterarbeit.mappingdsl.mappingDSL.DomainValue
import bergmann.masterarbeit.mappingdsl.mappingDSL.DomainElement

/**
 * This class contains custom validation rules.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class MonitorDslValidator extends AbstractMonitorDslValidator {
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital',
//					MonitorDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	@Check
	def checkExpressionType(UserVariable userVar){
		if(!userVar.expr.isValid){
			markSubexpressions(userVar.expr)
			error("Invalid User Variable. Can not resolve to a valid type", MonitorDslPackage.Literals.USER_VARIABLE__NAME)
		}
	}

	@Check
	def checkExpressionType(Assertion assertion){
		if(!assertion.expr.isBoolean){
			markSubexpressions(assertion.expr)
			error("Invalid Assertion. Can not resolve expression to boolean", MonitorDslPackage.Literals.ASSERTION__NAME)
		}
	}

	def markSubexpressions(Expression expr){
		if(!expr.isValid){
			var invalidSubexpressionFound = false
			for(Expression subExpr : expr.subexpressions){
				if(!subExpr.isValid){
					markSubexpressions(subExpr)
					invalidSubexpressionFound = true
				}
			}
			if(!invalidSubexpressionFound){
				// Error must be in how this expression is used, not in some subexpression
				error("Subexpression can't be resolved to a valid type", expr.eContainer, expr.eContainingFeature, -1)
			}
		}
	}

	@Check
	def checkTimeIntervals(TimeIntervalSimple t){
		// TODO: Implement this
	}

	@Check
	def unitMismatch(Add expr){
		var comp = expr.left.isUnitCompatible(expr.right)		 
		if (!comp){
			var lUnit = expr.left.unit
			var rUnit = expr.right.unit
			error("Incompatible units for operator " + expr.op + "\n\n[" + lUnit + "] " + expr.op + " [" + rUnit + "]", expr.eContainer, expr.eContainingFeature, -1)
		}		
	}
	@Check
	def unitMismatch(Rel expr){
		if(! (expr.left.isNumber && expr.right.isNumber))
			return
		var comp = expr.left.isUnitCompatible(expr.right)		 
		if (!comp){
			var lUnit = expr.left.unit
			var rUnit = expr.right.unit
			error("Incompatible units for operator " + expr.op + "\n\n[" + lUnit + "] " + expr.op + " [" + rUnit + "]", expr.eContainer, expr.eContainingFeature, -1)
		}		
	}
	
	@Check 
	def EqualsTypeWarning(Rel expr){
		if(expr.op.equals("==") || expr.op.equals("!=") )
			if(!expr.left.expressionType.equals(expr.right.expressionType))
				warning("Comparing two different datatypes: " + expr.left.expressionType + " and " + expr.right.expressionType + ". Resulting behaviour may be unpredictable",  expr.eContainer, expr.eContainingFeature, -1 )
	}
	
	@Check
	def IntervallAllowedCheck(LTL_Unary expr) {
		if(expr.time == null){
			return 
		}
		switch  expr.op {
			case NEXT,
			case PREVIOUS,
			case Z: error("Time constraints are currently not supported for given operator " + expr.op, MonitorDslPackage.Literals.LTL_UNARY__TIME)
		}
	}


	@Check
	def checkNamesAreUnique(Monitors monitors){
		var userVars = EcoreUtil2.eAllOfType(monitors, UserVariable)
		var assertions = EcoreUtil2.eAllOfType(monitors, Assertion)
		
		// Get names defined in imported domain files
		var domainNames = new HashMap<Import, ArrayList<String>>()
		for (Import i : monitors.imports){
			var d = EcoreUtil.getRootContainer(i.ref)
			var names = new ArrayList<String>()
			var elems = new ArrayList<DomainElement>()
			elems.addAll(EcoreUtil2.eAllOfType(d, LiteralJava))
			elems.addAll(EcoreUtil2.eAllOfType(d, UnaryJava))
			elems.addAll(EcoreUtil2.eAllOfType(d, BinaryJava))
			elems.addAll(EcoreUtil2.eAllOfType(d, DomainValue))
			for (j : elems) 
				names.add(j.name)
			domainNames.put(i, names)
		}
		
		for(entry : domainNames.entrySet){
			var domain = entry.key
			var elems = entry.value
			// Compare other domains
			for (e : elems) {
				for(entry2 : domainNames.entrySet){
					var domain2 = entry2.key
						if(domain != domain2){
							var elems2 = entry2.value
							if(elems2.contains(e)){
								error("Duplicate Identifier: " + e + ". Also used in domain " + domain2.ref.name, domain,MonitorDslPackage.Literals.IMPORT__REF )								
							}
						}
					}

				// Compare userVars
				for (uVar : userVars) {
					if(uVar.name.equals(e)){
						error("Duplicate Identifier: " + e + ". Also used in domain " + domain.ref.name, uVar,MonitorDslPackage.Literals.USER_VARIABLE__NAME )
					}
				}
				// Compare assertions
				for (ass  : assertions) {
					if(ass.name.equals(e)){
						error("Duplicate Identifier: " + e + ". Also used in domain " + domain.ref.name, ass,MonitorDslPackage.Literals.ASSERTION__NAME )
					}
				}
			}
		}
	}


}

