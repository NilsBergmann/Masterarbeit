/*
 * generated by Xtext 2.19.0
 */
package bergmann.masterarbeit.monitordsl.scoping

import static extension bergmann.masterarbeit.monitordsl.utils.ExpressionUtils.*
import static extension bergmann.masterarbeit.monitordsl.utils.ImportUtils.*
import bergmann.masterarbeit.mappingdsl.mappingDSL.BinaryJava
import bergmann.masterarbeit.mappingdsl.mappingDSL.Domain
import bergmann.masterarbeit.mappingdsl.mappingDSL.DomainValue
import bergmann.masterarbeit.mappingdsl.mappingDSL.LiteralJava
import bergmann.masterarbeit.mappingdsl.mappingDSL.UnaryJava
import bergmann.masterarbeit.monitordsl.monitorDSL.CrossReference
import bergmann.masterarbeit.monitordsl.monitorDSL.MappingBinary
import bergmann.masterarbeit.monitordsl.monitorDSL.Monitors
import java.util.ArrayList
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import bergmann.masterarbeit.monitordsl.monitorDSL.MonitorDSLPackage

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MonitorDSLScopeProvider extends AbstractMonitorDSLScopeProvider {


	override getScope(EObject ctx, EReference ref){
		if(ctx instanceof CrossReference && ref == MonitorDSLPackage.Literals.CROSS_REFERENCE__REF){

			if((ctx as CrossReference).optionalExpr == null){
				// Doesnt have optionalExpr
				// Refers to UserVariables or to domain java literals / database values
				var Monitors root = EcoreUtil2.getRootContainer(ctx) as Monitors
				var candidates = new ArrayList<EObject>()
				candidates.addAll(root.recursiveUserVariables)
				// Make self reference impossible 
				// Example def var x := x + 2
				var EObject parentOfCTX = null
				for(EObject current : candidates)
					if(EcoreUtil.isAncestor(current, ctx))
						parentOfCTX = current
				if(parentOfCTX != null)
					candidates.remove(parentOfCTX)
				// Add imported domain elements
				for(Domain current : root.recursiveImportedDomains){
					candidates.addAll(EcoreUtil2.eAllOfType(current, LiteralJava))
					candidates.addAll(EcoreUtil2.eAllOfType(current, DomainValue))	
				}
				return Scopes.scopeFor(candidates)
			} else {
				// Has optionalExpr
				var Monitors root = EcoreUtil2.getRootContainer(ctx) as Monitors
				var candidates = new ArrayList<EObject>()
				for(Domain current : root.recursiveImportedDomains){
					candidates.addAll(EcoreUtil2.eAllOfType(current, UnaryJava))
				}
				return Scopes.scopeFor(candidates)
			}
		} else if (ctx instanceof MappingBinary && ref == MonitorDSLPackage.Literals.MAPPING_BINARY__REF){
			// MappingBinary
			// Refers to domain BinaryJava elements
			var Monitors root = EcoreUtil2.getRootContainer(ctx) as Monitors
			var candidates = new ArrayList<EObject>()
			for(Domain current : root.recursiveImportedDomains){
				candidates.addAll(EcoreUtil2.eAllOfType(current, BinaryJava))
			}
			return Scopes.scopeFor(candidates)
		}
		return super.getScope(ctx, ref)
	}
}
