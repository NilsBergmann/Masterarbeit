grammar org.xtext.example.mydsl.MonitorDSL with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate monitorDSL "http://www.xtext.org/example/mydsl/MonitorDSL"

Prog:
	(imports+=Import)*
	ops+=(Assertion | UserVariable)*
;

Import:
	'import' path=STRING 'as' name=ID
;

UserVariable:
	"def" name=ID ":=" expr=Expression	
;

Assertion: 
	'assertion' name=ID ':=' expr=Expression
;

Expression:
	LTLInfixExpression
;

LTLInfixExpression returns Expression:
	LTLUnaryExpression ({LTL_Binary.left=current} op=BINARY_LTL_OPERATOR right=LTLUnaryExpression)*
;

LTLUnaryExpression returns Expression:
	ImplicationExpr | {LTL_Unary} op=UNARY_LTL_OPERATOR expr=ImplicationExpr
;

ImplicationExpr returns Expression:
	OrExpr ({Impl.left=current} op=('->'|'<->'|'implies'|'iff') right=AndExpr)*
;

OrExpr returns Expression:
	AndExpr ({Or.left=current} op=('or'|'|'|'||') right=AndExpr)*
;

AndExpr returns Expression:
	RelExpr ({And.left=current} op=('and'|'&'|'&&') right=RelExpr)*
;

RelExpr returns Expression:
	AddExpr ({Rel.left=current} op=('<'|'<='|'=='|'='|'!='|'>'|'>=') right=AddExpr)*
;

AddExpr returns Expression:
	MultExpr ({Add.left=current} op=('+'|'-') right=MultExpr)*
;

MultExpr returns Expression:
	UnExpr ({Mult.left=current} op=('*'|'/') right=UnExpr)*
;

UnExpr returns Expression: 
	{Negation} op=('!'|"-"|'not') exprAtom=AtomExpr | AtomExpr
;

AtomExpr returns Expression: 
	{Subexpression} '(' expr=Expression ')'
	// Literals
	| {IntLiteral} value=INT
	| {FloatLiteral} value=FLOAT
	| {BoolLiteral} value=("true" | "false")	
	// Imported Variables
	| {IntVarAtom} intvar=INT_VAR
	| {FloatVarAtom} intvar=FLOAT_VAR
	| {BoolVarAtom} boolvar=BOOL_VAR
	// User Variable
	| {UserVarAtom} var=[UserVariable]
;

terminal UNARY_LTL_OPERATOR:
	  'next' | 'X' 
	| 'finally' | 'F' 
	| 'globally' | 'G' 
	| 'previous' | 'Y' 
	| 'once' | 'O'  
	| 'historically' | 'H'
;

terminal BINARY_LTL_OPERATOR:
	  'until' | 'U' 
	| 'release' | 'R' 
	| 'weak_until' | 'W' 
	| 'strong_release' | 'M' 
	| 'since' | 'S' 
	| 'weak_since' | 'B'
;

terminal FLOAT_VAR:
	'tmp_float_var'
;
terminal INT_VAR: 
	'tmp_int_var'
;

terminal BOOL_VAR: 
    'tmp_bool_var'
;

terminal FLOAT returns ecore::EFloat: INT '.' INT;
